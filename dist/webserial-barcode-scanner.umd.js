!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).WebSerialBarcodeScanner=t()}(this,(function(){"use strict";class e{constructor(e){this._events={}}on(e,t){this._events[e]=this._events[e]||[],this._events[e].push(t)}emit(e,...t){let n=this._events[e];n&&n.forEach((e=>{e(...t)}))}}return class{constructor(t){this._internal={emitter:new e,port:null,reader:null,options:Object.assign({baudRate:9600,bufferSize:255,dataBits:8,flowControl:"none",parity:"none",stopBits:1},t)},navigator.serial.addEventListener("disconnect",(e=>{this._internal.port==e.target&&this._internal.emitter.emit("disconnected")}))}async connect(){try{let e=await navigator.serial.requestPort();e&&await this.open(e)}catch(e){console.log("Could not connect! "+e)}}async reconnect(e){if(!e.vendorId||!e.productId)return;let t=(await navigator.serial.getPorts()).filter((t=>{let n=t.getInfo();return n.usbVendorId==e.vendorId&&n.usbProductId==e.productId}));1==t.length&&await this.open(t[0])}async disconnect(){this._internal.port&&(this._internal.reader.releaseLock(),await this._internal.port.close(),this._internal.port=null,this._internal.reader=null,this._internal.emitter.emit("disconnected"))}async open(e){this._internal.port=e,await this._internal.port.open(this._internal.options);let t=this._internal.port.getInfo();this._internal.emitter.emit("connected",{type:"serial",vendorId:t.usbVendorId||null,productId:t.usbProductId||null});let n="";for(;e.readable;){this._internal.reader=e.readable.getReader();try{for(;;){const{value:e,done:t}=await this._internal.reader.read();if(t){this._internal.reader.releaseLock();break}if(e)for(let t=0;t<e.length;t++){let r=e[t];13!==r?n+=String.fromCharCode(r):(this._internal.emitter.emit("barcode",{value:n}),n="")}}}catch(e){n=""}}}addEventListener(e,t){this._internal.emitter.on(e,t)}}}));
