{"version":3,"file":"webserial-barcode-scanner.esm.js","sources":["../src/event-emitter.js","../src/symbology-detector.js","../src/main.js"],"sourcesContent":["class EventEmitter {\n    constructor(device) {\n        this._events = {};\n    }\n\n    on(e, f) {\n        this._events[e] = this._events[e] || [];\n        this._events[e].push(f);\n    }\n\n    emit(e, ...args) {\n        let fs = this._events[e];\n        if (fs) {\n            fs.forEach(f => {\n                setTimeout(() => f(...args), 0);\n            });\n        }\n    }        \n}\n\nexport default EventEmitter;","class SymbologyDetector {\n    \n    static detect(barcode) {\n        if (barcode.startsWith('http')) {\n            return 'qrcode';\n        }\n\n        else if (barcode.match(/^[0-9]+$/) && barcode.length == 8) {\n            return 'ean8';\n        }\n\n        else if (barcode.match(/^[0-9]+$/) && barcode.length == 12) {\n            return 'upca';\n        }\n\n        else if (barcode.match(/^[0-9]+$/) && barcode.length == 13) {\n            return 'ean13';\n        }\n\n        else if (barcode.match(/^M[0-9]/)) {\n            return 'aztec-code';\n        }\n\n        else if (barcode.length > 32) {\n            return 'qrcode';\n        }\n    }\n}\n\nexport default SymbologyDetector;","import EventEmitter from './event-emitter.js';\nimport SymbologyDetector from './symbology-detector.js';\n\nclass WebSerialBarcodeScanner {\n\n\tconstructor(options) {\n\t\tthis._internal = {\n\t\t\temitter:    new EventEmitter(),\n\t\t\tport:     \tnull,\n\t\t\treader:     null,\n\t\t\toptions:\tObject.assign({\n\t\t\t\tbaudRate:\t\t9600,\n\t\t\t\tbufferSize:\t\t255,\n\t\t\t\tdataBits:\t\t8,\n\t\t\t\tflowControl:\t'none',\n\t\t\t\tparity:\t\t\t'none',\n\t\t\t\tstopBits:\t\t1,\n\t\t\t\tguessSymbology: false,\n\t\t\t}, options)\n\t\t};\n\n\t\tnavigator.serial.addEventListener('disconnect', event => {\n\t\t\tif (this._internal.port == event.target) {\n\t\t\t\tthis._internal.emitter.emit('disconnected');\n\t\t\t}\n\t\t});\n\t}\n\n\tasync connect() {\n\t\ttry {\n\t\t\tlet port = await navigator.serial.requestPort();\n\t\t\t\n\t\t\tif (port) {\n\t\t\t\tawait this.open(port);\n\t\t\t}\n\t\t}\n\t\tcatch(error) {\n\t\t\tconsole.log('Could not connect! ' + error);\n\t\t}\n\t}\n\n\tasync reconnect(previousPort) {\n\t\tif (!previousPort.vendorId || !previousPort.productId) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet ports = await navigator.serial.getPorts();\n\n\t\tlet matches = ports.filter(port => {\n\t\t\tlet info = port.getInfo();\n\t\t\treturn info.usbVendorId == previousPort.vendorId && info.usbProductId == previousPort.productId;\n\t\t})\n\n\t\tif (matches.length == 1) {\n\t\t\tawait this.open(matches[0]);\n\t\t}\n\t}\n\n\tasync disconnect() {\n\t\tif (!this._internal.port) {\n\t\t\treturn;\n\t\t}\n\n        this._internal.reader.releaseLock();\n        await this._internal.port.close();\n\n        this._internal.port = null;\n        this._internal.reader = null;\n\n\t\tthis._internal.emitter.emit('disconnected');\n\t}\n\n\tasync open(port) {\n\t\tthis._internal.port = port;\n\n\t\tawait this._internal.port.open(this._internal.options);\n\n\t\tlet info = this._internal.port.getInfo();\n\n\t\tthis._internal.emitter.emit('connected', {\n\t\t\ttype:\t\t\t\t'serial',\n\t\t\tvendorId: \t\t\tinfo.usbVendorId || null,\n\t\t\tproductId: \t\t\tinfo.usbProductId || null\n\t\t});\n\n\t\tlet buffer = '';\n\n\t\twhile (port.readable) {\n            this._internal.reader = port.readable.getReader();\n\n\t\t\ttry {\n\t\t\t\twhile (true) {\n                    const { value, done } = await this._internal.reader.read();\n\n\t\t\t\t\tif (done) {\n                        this._internal.reader.releaseLock();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\t\t\t\tlet character = value[i];\n\n\t\t\t\t\t\t\tif (character !== 13) {\n\t\t\t\t\t\t\t\tbuffer += String.fromCharCode(character);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlet data = {\n\t\t\t\t\t\t\t\t\tvalue: buffer\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t/* Try to guess the symbology */\n\n\t\t\t\t\t\t\t\tif (this.options.guessSymbology) {\n\t\t\t\t\t\t\t\t\tlet symbology = SymbologyDetector.detect(buffer);\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (symbology) {\n\t\t\t\t\t\t\t\t\t\tdata.symbology = symbology;\n\t\t\t\t\t\t\t\t\t\tdata.guess = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis._internal.emitter.emit('barcode', data);\n\n\t\t\t\t\t\t\t\tbuffer = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tbuffer = '';\n\t\t\t}\n\t\t}\t\n\t}\n\n\taddEventListener(n, f) {\n\t\tthis._internal.emitter.on(n, f);\n\t}\n}\n\nexport default WebSerialBarcodeScanner;"],"names":["EventEmitter","constructor","device","this","_events","on","e","f","push","emit","args","fs","forEach","setTimeout","SymbologyDetector","static","barcode","startsWith","match","length","WebSerialBarcodeScanner","options","_internal","emitter","port","reader","Object","assign","baudRate","bufferSize","dataBits","flowControl","parity","stopBits","guessSymbology","navigator","serial","addEventListener","event","target","async","requestPort","open","error","console","log","previousPort","vendorId","productId","matches","getPorts","filter","info","getInfo","usbVendorId","usbProductId","releaseLock","close","type","buffer","readable","getReader","value","done","read","i","character","String","fromCharCode","data","symbology","detect","guess","n"],"mappings":"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"}